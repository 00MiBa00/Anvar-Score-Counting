org, repo = (ENV["GITHUB_REPOSITORY"] || "").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"] || "").split("/")

def wait_for_podfile(timeout: 120)
  podfile_path = "#{ENV['IOS_BUILD_PATH']}/iOS/Podfile"
  waited = 0
  until File.exist?(podfile_path) || waited >= timeout
    sleep 1
    waited += 1
  end
  if File.exist?(podfile_path)
    UI.message("‚úÖ Podfile found after #{waited} seconds")
    true
  else
    UI.important("‚ö†Ô∏è Podfile not found after #{timeout} seconds")
    false
  end
end

platform :ios do

  desc "Sync codesigning certificates"
  lane :sync_certificates do
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV['APPSTORE_P8']
    )

    main_app_bundle_id = ENV["IOS_BUNDLE_ID"]
    extension_bundle_id = "#{main_app_bundle_id}.notifications"

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: [main_app_bundle_id, extension_bundle_id],
      readonly: false
    )
  end

  desc "Install cocoapods"
  lane :install_pods do
    cocoapods(
      clean: true,
      use_bundle_exec: false,
      repo_update: true,
      podfile: "#{ENV['IOS_BUILD_PATH']}/iOS/Podfile"
    )
  end

  desc "Run pod install manually in iOS folder"
  lane :prepare_pods do
    podfile_path = "#{ENV['IOS_BUILD_PATH']}/iOS/Podfile"
    unless File.exist?(podfile_path)
      UI.user_error!("üö´ Podfile –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ Unity —Å–±–æ—Ä–∫–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å InitPodFile")
    end

    Dir.chdir("#{ENV['IOS_BUILD_PATH']}/iOS") do
      sh("pod install")
    end
  end

  desc "List Provisioning Profiles"
  lane :list_profiles do
    sh "security find-identity -v -p codesigning"
  end

  desc "Remove duplicate Info.plist from notifications extension"
  lane :fix_notifications_info_plist do
    require 'xcodeproj'

    project_path = "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    UI.user_error!("üö´ Xcode project not found at: #{project_path}") unless File.exist?(project_path)

    project = Xcodeproj::Project.open(project_path)

    target = project.targets.find { |t| t.name == "notifications" }
    unless target
      UI.important("‚ö†Ô∏è Target 'notifications' not found in #{project_path}")
      next
    end

    resources_phase = target.build_phases.find { |bp| bp.display_name == "Copy Bundle Resources" }
    unless resources_phase
      UI.important("‚ö†Ô∏è 'Copy Bundle Resources' phase not found in target 'notifications'")
      next
    end

    file_ref = project.files.find { |f| f.path == "NotificationService/Info.plist" }
    unless file_ref
      UI.important("‚ö†Ô∏è File 'NotificationService/Info.plist' not found in project")
      next
    end

    if resources_phase.file_ref?(file_ref)
      resources_phase.remove_file_reference(file_ref)
      project.save
      UI.message("‚úÖ Removed duplicate Info.plist from Copy Bundle Resources in 'notifications' target")
    else
      UI.important("‚ÑπÔ∏è 'NotificationService/Info.plist' not present in Copy Bundle Resources - nothing to do")
    end
  end

  desc "Deliver a new Beta build to Apple TestFlight"
  lane :beta do
    xcodeproj_path = "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    unless File.exist?(xcodeproj_path)
      UI.user_error!("‚ùå Xcode project not found at: #{xcodeproj_path}")
    end

    build
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  desc "Create .ipa"
  lane :build do
    begin
      setup_ci
      sync_certificates
      list_profiles

      xcodeproj_path = "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
      unless File.exist?(xcodeproj_path)
        UI.user_error!("‚ùå Xcode project not found at: #{xcodeproj_path}")
      end

      update_code_signing_settings(
        use_automatic_signing: true,
        path: xcodeproj_path
      )

      update_code_signing_settings(
        use_automatic_signing: false,
        team_id: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_team-id"],
        code_sign_identity: 'iPhone Distribution',
        targets: 'Unity-iPhone',
        path: xcodeproj_path,
        profile_name: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_profile-name"],
        profile_uuid: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore"]
      )

      update_code_signing_settings(
        use_automatic_signing: false,
        team_id: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}.notifications_appstore_team-id"],
        code_sign_identity: 'iPhone Distribution',
        targets: 'notifications',
        path: xcodeproj_path,
        profile_name: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}.notifications_appstore_profile-name"],
        profile_uuid: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}.notifications_appstore"]
      )

      version_number = ENV['APP_VERSION'] || '1.0.0'
      increment_version_number(version_number: version_number, xcodeproj: xcodeproj_path)

      last_build = latest_testflight_build_number(
        version: version_number,
        app_identifier: ENV['IOS_BUNDLE_ID']
      ).to_i
      increment_build_number(
        build_number: last_build + 1,
        xcodeproj: xcodeproj_path
      )

      UI.message("üì° –û–∂–∏–¥–∞–Ω–∏–µ Podfile: #{ENV['IOS_BUILD_PATH']}/iOS/Podfile")
      sh("ls -la #{ENV['IOS_BUILD_PATH']}/iOS || echo '‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'")

      if wait_for_podfile
        prepare_pods
        install_pods
      else
        UI.user_error!("üö´ Podfile not found ‚Äî stopping build")
      end

      fix_notifications_info_plist

      build_app(
        workspace: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcworkspace",
        scheme: 'Unity-iPhone',
        xcargs: '-allowProvisioningUpdates',
        export_options: {
          method: 'app-store',
          uploadBitcode: false,
          compileBitcode: false,
          provisioningProfiles: {
            "#{ENV['IOS_BUNDLE_ID']}" => ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_profile-name"],
            "#{ENV['IOS_BUNDLE_ID']}.notifications" => ENV["sigh_#{ENV['IOS_BUNDLE_ID']}.notifications_appstore_profile-name"]
          }
        }
      )

    rescue => ex
      UI.error("‚ùå Build failed: #{ex}")
      sh("mkdir -p #{ENV['IOS_BUILD_PATH']}/logs")
      sh("cp ~/Library/Logs/gym/ScoreCounting-Unity-iPhone.log #{ENV['IOS_BUILD_PATH']}/logs/build_fail.log || echo 'Log not found'")
      raise ex
    end
  end
end
