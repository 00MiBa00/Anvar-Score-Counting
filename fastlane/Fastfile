org, repo = (ENV["GITHUB_REPOSITORY"]||"").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]||"").split("/")

before_all do
  # Ensure we use compatible Xcode version for Unity 2022.3.33f1
  xcversion(version: "15.4") if is_ci
end

platform :ios do
  lane :init_ci do
    github_action(
      api_token: ENV["GH_PAT"],
      org: org,
      repo: repo,
      match_org: match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  desc "Sync codesigning certificates"
  lane :sync_certificates do
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV['APPSTORE_P8']
    )

    main_app_bundle_id = ENV["IOS_BUNDLE_ID"]
    #extension_bundle_id = "#{ENV["IOS_BUNDLE_ID"]}.OneSignalNotificationServiceExtension"

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      #app_identifier: [main_app_bundle_id, extension_bundle_id],
      app_identifier: [main_app_bundle_id],
      readonly: false
    )
  end

  desc "Deliver a new Release build to the App Store"
  lane :release do
    build
    deliver
    upload_to_app_store(
      submit_for_review: false,
      automatic_release: false,
      force: true,
      skip_screenshots: true,
      run_precheck_before_submit: false
    )
  end
  desc "Deliver a new Beta build to Apple TestFlight"
  lane :beta do
    begin
      # Missing Export Compliance can also be set through Deliverfile
      update_info_plist(
        xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
        plist_path: 'Info.plist',
        block: proc do |plist|
          plist['ITSAppUsesNonExemptEncryption'] = false
        end
      )

      # Update iOS Deployment Target
      update_info_plist(
        xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
        plist_path: 'Info.plist',
        block: proc do |plist|
          plist['MinimumOSVersion'] = '11.0'
          plist['NSLocationWhenInUseUsageDescription'] = 'Allow access to location for app usage'
        end
      )

      build
      upload_to_testflight(skip_waiting_for_build_processing: true)
    rescue => ex
      UI.error("Beta deployment failed: #{ex}")
      UI.error("Stacktrace: #{ex.backtrace.join("\n")}")
      raise ex
    end
  end

  desc "List Provisioning Profiles"
  lane :list_profiles do
    sh "security find-identity -v -p codesigning"
  end
  desc "Install cocoapods"
  lane :install_pods do
    begin
      cocoapods(
        clean: true,
        use_bundle_exec: false,
        repo_update: true,
        podfile: "#{ENV['IOS_BUILD_PATH']}/iOS/Podfile"
      )
    rescue => ex
      UI.error("CocoaPods installation failed: #{ex}")
      UI.important("Continuing without CocoaPods...")
    end
  end
  desc "Create .ipa"
  lane :build do
    setup_ci
    sync_certificates
    list_profiles

    # Unity has specific requirements around codesigning that we have to handle
    # See https://github.com/fastlane/fastlane/discussions/17458 for context
   
    # Use manual signing for Unity projects to avoid conflicts
    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_team-id"],
      code_sign_identity: 'iPhone Distribution',
      targets: 'Unity-iPhone',
      path: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
      profile_name: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_profile-name"],
      profile_uuid: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore"]
    )

    # Update version & build number
    version_number = ENV['APP_VERSION'] || '1.0.0'
    increment_version_number(version_number: version_number, xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj")
    increment_build_number({ build_number: latest_testflight_build_number(version: version_number, app_identifier: ENV['IOS_BUNDLE_ID']) + 1, xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"}) 
    
    # Install pods if Podfile exists
    if File.exist?("#{ENV['IOS_BUILD_PATH']}/iOS/Podfile")
      install_pods
    end

    # Check if workspace exists (created by CocoaPods)
    workspace_path = "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcworkspace"
    project_path = "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    
    build_app(
      workspace: File.exist?(workspace_path) ? workspace_path : nil,
      project: File.exist?(workspace_path) ? nil : project_path,
      scheme: 'Unity-iPhone',
      xcargs: '-allowProvisioningUpdates',
      export_options: {
        method: 'app-store',
        uploadBitcode: false,
        compileBitcode: false,
        uploadSymbols: true,
        provisioningProfiles: {
          ENV['IOS_BUNDLE_ID'] => ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_profile-name"]
        }
      }
    )
  end

end
